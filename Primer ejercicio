#include <iostream>
#include <vector>
#include <stdexcept>

std::vector<int> dividirVectores(const std::vector<int>& v1, const std::vector<int>& v2) {
    if (v1.size() != v2.size()) {
        throw std::invalid_argument("Los vectores deben tener la misma longitud.");
    }
    std::vector<int> resultado(v1.size());
    for (size_t i = 0; i < v1.size(); ++i) {
        if (v2[i] == 0) {
            throw std::runtime_error("División por cero.");
        }
        resultado[i] = v1[i] / v2[i];
    }
    return resultado;
}

int main() {
    int n;
    std::cout << "Ingrese la longitud de los vectores: ";
    std::cin >> n;

    std::vector<int> v1(n);
    std::vector<int> v2(n);

    std::cout << "Ingrese los elementos del primer vector:\n";
    for (int i = 0; i < n; ++i) {
        std::cin >> v1[i];
    }

    std::cout << "Ingrese los elementos del segundo vector (solo números pares):\n";
    for (int i = 0; i < n; ++i) {
        do {
            std::cin >> v2[i];
            if (v2[i] % 2 != 0) {
                std::cout << "Debe ingresar un número par. Intente de nuevo: ";
            }
        } while (v2[i] % 2 != 0);
    }

    try {
        std::vector<int> resultado = dividirVectores(v1, v2);
        std::cout << "El vector resultante es:\n";
        for (int i = 0; i < n; ++i) {
            std::cout << resultado[i] << " ";
        }
        std::cout << std::endl;
    } catch (const std::exception& e) {
        std::cerr << "Error: " << e.what() << std::endl;
    }

    return 0;
}
